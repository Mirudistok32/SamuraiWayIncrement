{"version":3,"sources":["Input/Input.module.scss","CountPanel/CountPanel.module.scss","CountPanel/CountPanel.tsx","Button/Button.tsx","CountCanvas/CountCanvas.tsx","Input/Input.tsx","SettingCanvas/SettingCanvas.tsx","App.tsx","index.tsx","CountCanvas/CountCanvas.module.scss","Button/Button.module.scss","SettingCanvas/SettingCanvas.module.scss"],"names":["module","exports","CountPanel","React","memo","props","count","maxValue","error","isChangeValue","mainClass","s","mainClassError","className","Button","title","disabled","isClickMe","onClick","button","button__error","button__disabled","button__clickMe","CountCanvas","setInc","setReset","startValue","classes","countCanvasDisplay","countCanvasApi","history","useHistory","push","Input","value","setValue","setIsChangeValue","localStorage","main","mainClassTitle","main__title","mainClassInput","main__input","type","min","onChange","e","currentTarget","SettingCanvas","setStartValue","setMaxValue","setCount","setError","useState","maxValueLocal","setMaxValueLocal","startValueLocal","setStartValueLocal","countSpanError","isError","useCallback","useEffect","localStorageStartValue","getItem","localStorageMaxValue","setIsChangeValueHandler","localStorageHandler","setItem","App","exact","path","render","to","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.9dc74223.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Input_main__3beaF\",\"main__title\":\"Input_main__title__2B0QE\",\"main__input\":\"Input_main__input__24dfD\",\"main__input-error\":\"Input_main__input-error__2tByt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"count-panel\":\"CountPanel_count-panel__1UACz\",\"count-panel__max-value\":\"CountPanel_count-panel__max-value__1GdfQ\",\"count-panel__error\":\"CountPanel_count-panel__error__3IeqY\"};","import React from 'react';\r\nimport s from './CountPanel.module.scss';\r\n\r\n\r\ntype PropsType = {\r\n  count: number\r\n  maxValue: number\r\n  error: string\r\n  isChangeValue: boolean\r\n}\r\n\r\nexport const CountPanel: React.FC<PropsType> = React.memo((props) => {\r\n\r\n  const { count, maxValue, error, isChangeValue } = props\r\n\r\n  let mainClass = s['count-panel']\r\n  let mainClassError = s['count-panel__error']\r\n  if (count >= maxValue) mainClass += ` ` + s['count-panel__max-value']\r\n\r\n  return (\r\n    <div className={mainClass}>\r\n      {\r\n        !error && !isChangeValue && count\r\n      }\r\n      {\r\n        error && <span className={mainClassError}>Incorrect value!</span>\r\n      }\r\n      {\r\n        isChangeValue && !error && <span className={mainClassError}>Press 'set'</span>\r\n      }\r\n    </div>\r\n  );\r\n})\r\n","import React from 'react';\r\nimport s from './Button.module.scss';\r\n\r\n\r\ntype PropsType = {\r\n  title: string\r\n  error?: string\r\n  isClickMe?: boolean\r\n  disabled?: boolean\r\n  onClick?: () => void\r\n}\r\n\r\nexport const Button: React.FC<PropsType> = React.memo((props) => {\r\n\r\n  const { title, error, disabled, isClickMe, onClick } = props\r\n\r\n  let mainClass = s.button\r\n  if (error) mainClass += ` ` + s.button__error\r\n  if (disabled) mainClass += ` ` + s.button__disabled\r\n  if (isClickMe) mainClass += ` ` + s.button__clickMe\r\n\r\n  const onClickHandler = () => {\r\n    onClick && onClick()\r\n  }\r\n\r\n\r\n  return (\r\n    <button className={mainClass} onClick={onClickHandler} disabled={disabled} >\r\n      {\r\n        title\r\n      }\r\n    </button>\r\n  );\r\n})\r\n","import React from 'react';\r\nimport s from './CountCanvas.module.scss';\r\nimport { CountPanel } from '../CountPanel/CountPanel';\r\nimport { Button } from '../Button/Button';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\ntype ClassesType = {\r\n  mainClass: string\r\n  countCanvasDisplay: string\r\n  countCanvasApi: string\r\n}\r\n\r\ntype PropsType = {\r\n  maxValue: number\r\n  count: number\r\n  error: string\r\n  isChangeValue: boolean\r\n  startValue: number\r\n  setInc: () => void\r\n  setReset: () => void\r\n}\r\n\r\nexport const CountCanvas: React.FC<PropsType> = (props) => {\r\n\r\n  const { setInc, setReset, count, maxValue, startValue, error, isChangeValue } = props\r\n\r\n  //Объект для работы с классами\r\n  let classes: ClassesType = {\r\n    mainClass: s['count-canvas'],\r\n    countCanvasDisplay: s['count-canvas__display'],\r\n    countCanvasApi: s['count-canvas__api']\r\n  }\r\n  if (count >= maxValue) classes.countCanvasDisplay += ` ` + s['count-canvas__max-value']\r\n\r\n  //Для перенаправления на окно настроек\r\n  let history = useHistory();\r\n  const redirectSettings = () => {\r\n    history.push('/setting')\r\n  }\r\n\r\n  return (\r\n    <div className={classes.mainClass}>\r\n      <div className={classes.countCanvasDisplay}>\r\n        <CountPanel count={count} maxValue={maxValue} error={error} isChangeValue={isChangeValue} />\r\n      </div>\r\n      <div className={classes.countCanvasApi}>\r\n        <Button title={'Inc'} onClick={setInc} disabled={count >= maxValue} />\r\n        <Button title={'Reset'} onClick={setReset} disabled={count < (startValue + 1)} isClickMe={count >= maxValue} />\r\n        <Button title={'Set'} onClick={redirectSettings} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { ChangeEvent } from 'react';\r\nimport s from './Input.module.scss';\r\n\r\n\r\ntype PropsType = {\r\n  title: string\r\n  value: number\r\n  error?: string\r\n  setValue: (value: number) => void\r\n  setIsChangeValue?: () => void\r\n  localStorage: (title: string, value: string) => void\r\n}\r\n\r\nexport const Input: React.FC<PropsType> = React.memo((props) => {\r\n\r\n  const { title, value, error, setValue, setIsChangeValue, localStorage } = props\r\n\r\n  let mainClass = s.main\r\n  let mainClassTitle = s.main__title\r\n  let mainClassInput = s.main__input\r\n  if (error) mainClassInput += ` ` + s['main__input-error']\r\n\r\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setValue(+e.currentTarget.value)\r\n    setIsChangeValue && setIsChangeValue()\r\n    localStorage(title, e.currentTarget.value)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <label className={mainClass} >\r\n        <span className={mainClassTitle}>{title}</span>\r\n        <input className={mainClassInput} type=\"number\" min=\"-1\" value={value} onChange={onChangeHandler} />\r\n      </label>\r\n    </>\r\n  );\r\n})\r\n","import React, { useState, useEffect, useCallback } from 'react';\r\nimport s from './SettingCanvas.module.scss';\r\nimport { Button } from '../Button/Button';\r\nimport { Input } from '../Input/Input';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\ntype ClassesType = {\r\n  mainClass: string\r\n  countCanvasDisplay: string\r\n  countCanvasApi: string\r\n  countSpanError: string\r\n}\r\n\r\ntype PropsType = {\r\n  error: string\r\n  isChangeValue: boolean\r\n  setIsChangeValue: (isChangeValue: boolean) => void\r\n  setStartValue: (value: number) => void\r\n  setMaxValue: (value: number) => void\r\n  setCount: (value: number) => void\r\n  setError: (error: string) => void\r\n}\r\n\r\nexport const SettingCanvas: React.FC<PropsType> = (props) => {\r\n\r\n  const { setStartValue, setMaxValue, setCount, setError, error, isChangeValue, setIsChangeValue } = props\r\n\r\n  const [maxValueLocal, setMaxValueLocal] = useState<number>(1)\r\n  const [startValueLocal, setStartValueLocal] = useState<number>(0)\r\n\r\n  //Объект для работы с классами\r\n  let classes: ClassesType = {\r\n    mainClass: s['count-canvas'],\r\n    countCanvasDisplay: s['count-canvas__display'],\r\n    countCanvasApi: s['count-canvas__api'],\r\n    countSpanError: s['count-canvas__error']\r\n  }\r\n\r\n  const isError = useCallback(() => {\r\n    if (startValueLocal < 0) {\r\n      setError(\"Start value can not be less 0\")\r\n    } else if (maxValueLocal === startValueLocal) {\r\n      setError(\"Start value can not be equally Max value\")\r\n    } else if (startValueLocal > maxValueLocal) {\r\n      setError(\"Start value can not be more Max value\")\r\n    } else {\r\n      setError(\"\")\r\n    }\r\n  }, [maxValueLocal, startValueLocal, setError])\r\n\r\n  useEffect(() => {\r\n    isError()\r\n  }, [maxValueLocal, startValueLocal, isError])\r\n\r\n\r\n  useEffect(() => {\r\n    let localStorageStartValue: string | null = localStorage.getItem('Start value')\r\n    let localStorageMaxValue: string | null = localStorage.getItem('Max value')\r\n\r\n    if (localStorageStartValue) {\r\n      setStartValueLocal(+localStorageStartValue)\r\n    }\r\n    if (localStorageMaxValue) {\r\n      setMaxValueLocal(+localStorageMaxValue)\r\n    }\r\n  }, [maxValueLocal, startValueLocal])\r\n\r\n  let history = useHistory()\r\n  const onClickHandler = () => {\r\n    setStartValue(startValueLocal)\r\n    setMaxValue(maxValueLocal)\r\n    setCount(startValueLocal)\r\n    setIsChangeValue(false)\r\n    history.push('/main')\r\n  }\r\n\r\n  const setIsChangeValueHandler = useCallback(() => {\r\n    setIsChangeValue(true)\r\n  }, [setIsChangeValue])\r\n\r\n  //Записываю в локалсторедж\r\n  const localStorageHandler = useCallback((title: string, value: string) => {\r\n    localStorage.setItem(title, value)\r\n  }, [])\r\n\r\n\r\n  return (\r\n    <div className={classes.mainClass}>\r\n      <div className={classes.countCanvasDisplay}>\r\n        <Input\r\n          title={\"Max value\"}\r\n          value={maxValueLocal}\r\n          setValue={setMaxValueLocal}\r\n          error={error}\r\n          setIsChangeValue={setIsChangeValueHandler}\r\n          localStorage={localStorageHandler}\r\n        />\r\n        <Input\r\n          title={\"Start value\"}\r\n          value={startValueLocal}\r\n          setValue={setStartValueLocal}\r\n          error={error}\r\n          setIsChangeValue={setIsChangeValueHandler}\r\n          localStorage={localStorageHandler}\r\n        />\r\n        {\r\n          error && <span className={classes.countSpanError}>{error}</span>\r\n        }\r\n      </div>\r\n      <div className={classes.countCanvasApi}>\r\n        <Button\r\n          title={'Set'}\r\n          onClick={onClickHandler}\r\n          disabled={error !== '' || !isChangeValue} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect, useCallback } from 'react';\r\nimport './App.scss';\r\nimport { CountCanvas } from './CountCanvas/CountCanvas';\r\nimport { SettingCanvas } from './SettingCanvas/SettingCanvas';\r\nimport { Switch, Route, Redirect } from 'react-router-dom';\r\n\r\n\r\nfunction App() {\r\n\r\n  const [startValue, setStartValue] = useState<number>(0)\r\n  const [maxValue, setMaxValue] = useState<number>(1)\r\n  const [count, setCount] = useState<number>(startValue)\r\n  const [error, setError] = useState<string>('')\r\n  const [isChangeValue, setIsChangeValue] = useState<boolean>(false)\r\n\r\n\r\n  useEffect(() => {\r\n    let localStorageStartValue: string | null = localStorage.getItem('Start value')\r\n    let localStorageMaxValue: string | null = localStorage.getItem('Max value')\r\n\r\n\r\n    if (localStorageStartValue) {\r\n      setStartValue(+localStorageStartValue)\r\n      setCount(+localStorageStartValue)\r\n    }\r\n    if (localStorageMaxValue) {\r\n      setMaxValue(+localStorageMaxValue)\r\n    }\r\n  }, [])\r\n\r\n  const setInc = () => {\r\n    setCount(count => count + 1)\r\n  }\r\n\r\n  const setReset = useCallback(() => {\r\n    setCount(startValue)\r\n  }, [startValue])\r\n\r\n  return (\r\n    <div className=\"app\">\r\n\r\n      <h1 className=\"app__title\">\r\n        Расчет от {count} до {maxValue}\r\n      </h1>\r\n      <div className=\"app__canvas\">\r\n        <Switch>\r\n          <Route exact path=\"/\" render={() => <Redirect to=\"/main\" />} />\r\n          <Route path=\"/main\" render={() => (\r\n            <CountCanvas\r\n              startValue={startValue}\r\n              maxValue={maxValue}\r\n              count={count}\r\n              setInc={setInc}\r\n              setReset={setReset}\r\n              error={error}\r\n              isChangeValue={isChangeValue}\r\n            />\r\n          )} />\r\n          <Route path=\"/setting\" render={() => (\r\n            <SettingCanvas\r\n              error={error}\r\n              setStartValue={setStartValue}\r\n              setMaxValue={setMaxValue}\r\n              setCount={setCount}\r\n              setError={setError}\r\n              isChangeValue={isChangeValue}\r\n              setIsChangeValue={setIsChangeValue}\r\n            />\r\n          )} />\r\n        </Switch>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { HashRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n      <App />\r\n    </HashRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"count-canvas\":\"CountCanvas_count-canvas__3vtP6\",\"count-canvas__display\":\"CountCanvas_count-canvas__display__2WFne\",\"count-canvas__api\":\"CountCanvas_count-canvas__api__1GgZ9\",\"count-canvas__max-value\":\"CountCanvas_count-canvas__max-value__3qUt-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__2Xlx6\",\"button__error\":\"Button_button__error__10BjL\",\"button__disabled\":\"Button_button__disabled__T0ggx\",\"button__clickMe\":\"Button_button__clickMe__2t85D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"count-canvas\":\"SettingCanvas_count-canvas__2NBhI\",\"count-canvas__display\":\"SettingCanvas_count-canvas__display__1FwGg\",\"count-canvas__api\":\"SettingCanvas_count-canvas__api__2KOkd\",\"count-canvas__max-value\":\"SettingCanvas_count-canvas__max-value__2WfAx\",\"count-canvas__error\":\"SettingCanvas_count-canvas__error__1dmaS\"};"],"sourceRoot":""}