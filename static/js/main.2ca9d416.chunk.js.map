{"version":3,"sources":["CountCanvas/CountCanvas.module.scss","Button/Button.module.scss","SettingCanvas/SettingCanvas.module.scss","Input/Input.module.scss","CountPanel/CountPanel.module.scss","CountPanel/CountPanel.tsx","Button/Button.tsx","CountCanvas/CountCanvas.tsx","Input/Input.tsx","SettingCanvas/SettingCanvas.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","CountPanel","props","count","maxValue","error","isChangeValue","mainClass","s","mainClassError","className","Button","title","disabled","isClickMe","onClick","button","button__error","button__disabled","button__clickMe","CountCanvas","setInc","setReset","startValue","classes","countCanvasDisplay","countCanvasApi","Input","value","setValue","setIsChangeValue","main","mainClassTitle","main__title","mainClassInput","main__input","type","min","onChange","e","currentTarget","SettingCanvas","setStartValue","setMaxValue","setCount","setError","useState","maxValueLocal","setMaxValueLocal","startValueLocal","setStartValueLocal","countSpanError","useEffect","setIsChangeValueHandler","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.2ca9d416.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"count-canvas\":\"CountCanvas_count-canvas__2oOBd\",\"count-canvas__display\":\"CountCanvas_count-canvas__display__4Kl-l\",\"count-canvas__api\":\"CountCanvas_count-canvas__api__IUMcY\",\"count-canvas__max-value\":\"CountCanvas_count-canvas__max-value__1HwjX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__BBWb_\",\"button__error\":\"Button_button__error__371-7\",\"button__disabled\":\"Button_button__disabled__2cd2X\",\"button__clickMe\":\"Button_button__clickMe__2F3pA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"count-canvas\":\"SettingCanvas_count-canvas__2UFOZ\",\"count-canvas__display\":\"SettingCanvas_count-canvas__display__1s6Yo\",\"count-canvas__api\":\"SettingCanvas_count-canvas__api__1I-Gw\",\"count-canvas__max-value\":\"SettingCanvas_count-canvas__max-value__3o40i\",\"count-canvas__error\":\"SettingCanvas_count-canvas__error__2bJ4B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Input_main__360WO\",\"main__title\":\"Input_main__title__1KMkd\",\"main__input\":\"Input_main__input__21-EP\",\"main__input-error\":\"Input_main__input-error__2_A_I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"count-panel\":\"CountPanel_count-panel__3ARJb\",\"count-panel__max-value\":\"CountPanel_count-panel__max-value__3Ybnn\",\"count-panel__error\":\"CountPanel_count-panel__error__2kA1C\"};","import React from 'react';\r\nimport s from './CountPanel.module.scss';\r\n\r\n\r\ntype PropsType = {\r\n  count: number\r\n  maxValue: number\r\n  error: string\r\n  isChangeValue: boolean\r\n}\r\n\r\nexport const CountPanel: React.FC<PropsType> = (props) => {\r\n\r\n  const { count, maxValue, error, isChangeValue } = props\r\n\r\n  let mainClass = s['count-panel']\r\n  let mainClassError = s['count-panel__error']\r\n  if (count >= maxValue) mainClass += ` ` + s['count-panel__max-value']\r\n\r\n  return (\r\n    <div className={mainClass}>\r\n      {\r\n        !error && !isChangeValue && count\r\n      }\r\n      {\r\n        error && <span className={mainClassError}>Incorrect value!</span>\r\n      }\r\n      {\r\n        isChangeValue && !error && <span className={mainClassError}>Press 'set'</span>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport s from './Button.module.scss';\r\n\r\n\r\ntype PropsType = {\r\n  title: string\r\n  error?: string\r\n  isClickMe?: boolean\r\n  disabled?: boolean\r\n  onClick?: () => void\r\n}\r\n\r\nexport const Button: React.FC<PropsType> = (props) => {\r\n\r\n  const { title, error, disabled, isClickMe, onClick } = props\r\n\r\n  let mainClass = s.button\r\n  if (error) mainClass += ` ` + s.button__error\r\n  if (disabled) mainClass += ` ` + s.button__disabled\r\n  if (isClickMe) mainClass += ` ` + s.button__clickMe\r\n\r\n  const onClickHandler = () => {\r\n    onClick && onClick()\r\n  }\r\n\r\n\r\n  return (\r\n    <button className={mainClass} onClick={onClickHandler} disabled={disabled} >\r\n      {\r\n        title\r\n      }\r\n    </button>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport s from './CountCanvas.module.scss';\r\nimport { CountPanel } from '../CountPanel/CountPanel';\r\nimport { Button } from '../Button/Button';\r\n\r\ntype ClassesType = {\r\n  mainClass: string\r\n  countCanvasDisplay: string\r\n  countCanvasApi: string\r\n}\r\n\r\ntype PropsType = {\r\n  maxValue: number\r\n  count: number\r\n  error: string\r\n  isChangeValue: boolean\r\n  startValue: number\r\n  setInc: () => void\r\n  setReset: () => void\r\n}\r\n\r\nexport const CountCanvas: React.FC<PropsType> = (props) => {\r\n\r\n  const { setInc, setReset, count, maxValue, startValue, error, isChangeValue } = props\r\n\r\n  //Объект для работы с классами\r\n  let classes: ClassesType = {\r\n    mainClass: s['count-canvas'],\r\n    countCanvasDisplay: s['count-canvas__display'],\r\n    countCanvasApi: s['count-canvas__api']\r\n  }\r\n  if (count >= maxValue) classes.countCanvasDisplay += ` ` + s['count-canvas__max-value']\r\n\r\n\r\n  return (\r\n    <div className={classes.mainClass}>\r\n      <div className={classes.countCanvasDisplay}>\r\n        <CountPanel count={count} maxValue={maxValue} error={error} isChangeValue={isChangeValue}/>\r\n      </div>\r\n      <div className={classes.countCanvasApi}>\r\n        <Button title={'Inc'} onClick={setInc} disabled={count >= maxValue} />\r\n        <Button title={'Reset'} onClick={setReset} disabled={count < (startValue + 1)} isClickMe={count >= maxValue} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { ChangeEvent } from 'react';\r\nimport s from './Input.module.scss';\r\n\r\n\r\ntype PropsType = {\r\n  title: string\r\n  value: number\r\n  error?: string\r\n  setValue: (value: number) => void\r\n  setIsChangeValue?: () => void\r\n}\r\n\r\nexport const Input: React.FC<PropsType> = (props) => {\r\n\r\n  const { title, value, error, setValue,setIsChangeValue } = props\r\n\r\n  let mainClass = s.main\r\n  let mainClassTitle = s.main__title\r\n  let mainClassInput = s.main__input\r\n  if (error) mainClassInput += ` ` + s['main__input-error']\r\n\r\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setValue(+e.currentTarget.value)\r\n    setIsChangeValue && setIsChangeValue()\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <label className={mainClass} >\r\n        <span className={mainClassTitle}>{title}</span>\r\n        <input className={mainClassInput} type=\"number\" min=\"-1\" value={value} onChange={onChangeHandler} />\r\n      </label>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport s from './SettingCanvas.module.scss';\r\nimport { Button } from '../Button/Button';\r\nimport { Input } from '../Input/Input';\r\n\r\ntype ClassesType = {\r\n  mainClass: string\r\n  countCanvasDisplay: string\r\n  countCanvasApi: string\r\n  countSpanError: string\r\n}\r\n\r\ntype PropsType = {\r\n  error: string\r\n  isChangeValue: boolean\r\n  setIsChangeValue: (isChangeValue: boolean) => void\r\n  setStartValue: (value: number) => void\r\n  setMaxValue: (value: number) => void\r\n  setCount: (value: number) => void\r\n  setError: (error: string) => void\r\n}\r\n\r\nexport const SettingCanvas: React.FC<PropsType> = (props) => {\r\n\r\n  const { setStartValue, setMaxValue, setCount, setError, error, isChangeValue, setIsChangeValue } = props\r\n\r\n  const [maxValueLocal, setMaxValueLocal] = useState<number>(1)\r\n  const [startValueLocal, setStartValueLocal] = useState<number>(0)\r\n\r\n  //Объект для работы с классами\r\n  let classes: ClassesType = {\r\n    mainClass: s['count-canvas'],\r\n    countCanvasDisplay: s['count-canvas__display'],\r\n    countCanvasApi: s['count-canvas__api'],\r\n    countSpanError: s['count-canvas__error']\r\n  }\r\n\r\n  const isError = () => {\r\n    if (startValueLocal < 0) {\r\n      setError(\"Start value can not be less 0\")\r\n    } else if (maxValueLocal === startValueLocal) {\r\n      setError(\"Start value can not be equally Max value\")\r\n    } else if (startValueLocal > maxValueLocal) {\r\n      setError(\"Start value can not be more Max value\")\r\n    } else {\r\n      setError(\"\")\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    isError()\r\n  }, [maxValueLocal, startValueLocal])\r\n\r\n  const onClickHandler = () => {\r\n    setStartValue(startValueLocal)\r\n    setMaxValue(maxValueLocal)\r\n    setCount(startValueLocal)\r\n    setIsChangeValue(false)\r\n  }\r\n\r\n  const setIsChangeValueHandler = () => {\r\n    setIsChangeValue(true)\r\n  }\r\n\r\n  return (\r\n    <div className={classes.mainClass}>\r\n      <div className={classes.countCanvasDisplay}>\r\n        <Input\r\n          title={\"Max value\"}\r\n          value={maxValueLocal}\r\n          setValue={setMaxValueLocal}\r\n          error={error}\r\n          setIsChangeValue={setIsChangeValueHandler} />\r\n        <Input\r\n          title={\"Start value\"}\r\n          value={startValueLocal}\r\n          setValue={setStartValueLocal}\r\n          error={error}\r\n          setIsChangeValue={setIsChangeValueHandler} />\r\n        {\r\n          error && <span className={classes.countSpanError}>{error}</span>\r\n        }\r\n      </div>\r\n      <div className={classes.countCanvasApi}>\r\n        <Button\r\n          title={'Set'}\r\n          onClick={onClickHandler}\r\n          disabled={error !== '' || !isChangeValue} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport './App.scss';\r\nimport { CountCanvas } from './CountCanvas/CountCanvas';\r\nimport { SettingCanvas } from './SettingCanvas/SettingCanvas';\r\n\r\n\r\nfunction App() {\r\n\r\n  const [startValue, setStartValue] = useState<number>(0)\r\n  const [maxValue, setMaxValue] = useState<number>(1)\r\n  const [count, setCount] = useState<number>(startValue)\r\n  const [error, setError] = useState<string>('')\r\n  const [isChangeValue, setIsChangeValue] = useState<boolean>(false)\r\n\r\n\r\n  const setInc = () => {\r\n    setCount(count => count + 1)\r\n  }\r\n\r\n  const setReset = () => {\r\n    setCount(startValue)\r\n  }\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <h1 className=\"app__title\">\r\n        Расчет от {startValue} до {maxValue}\r\n      </h1>\r\n      <div className=\"app__canvas\">\r\n        <SettingCanvas\r\n          error={error}\r\n          setStartValue={setStartValue}\r\n          setMaxValue={setMaxValue}\r\n          setCount={setCount}\r\n          setError={setError}\r\n          isChangeValue={isChangeValue}\r\n          setIsChangeValue={setIsChangeValue}\r\n        />\r\n        <CountCanvas\r\n          startValue={startValue}\r\n          maxValue={maxValue}\r\n          count={count}\r\n          setInc={setInc}\r\n          setReset={setReset}\r\n          error={error}\r\n          isChangeValue={isChangeValue}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}